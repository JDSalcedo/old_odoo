odoo.define('pos_boleta.models', function (require) {
	"use strict";

	var models = require('point_of_sale.models');
	var screens = require('point_of_sale.screens');
	var core = require('web.core');
	var Session = require('web.Session');
	var Model = require('web.DataModel');

	var QWeb = core.qweb;
	var mixins = core.mixins;
	
	/*
	var _super_posmodel = models.PosModel.prototype;
	models.PosModel = models.PosModel.extend({
		initialize: function(session, attributes) {
			var partner_model = _.find(this.models, function(model){
				return model.model == 'res.partner';
			});
			
			partner_model.fields.push('doc_number');
			
			return _super_posmodel.initialize.call(this, session, attributes);
		},
	});
	*/

	var _super_order = models.Order.prototype;
	models.Order = models.Order.extend({
		
		get_final_journal: function(){
	        return this.pos.config.final_journal_id;
	    },
		
		export_as_JSON: function(){
	        var json = _super_order.export_as_JSON.apply(this,arguments);
	        json.final_journal_id = this.get_final_journal() ? this.get_final_journal()[0] : false;
	        return json;
	    },
	});
	
	models.PosModel = models.PosModel.extend({
		
		// saves the order locally and try to send it to the backend and make an invoice
	    // returns a deferred that succeeds when the order has been posted and successfully generated
	    // an invoice. This method can fail in various ways:
	    // error-no-client: the order must have an associated partner_id. You can retry to make an invoice once
	    //     this error is solved
	    // error-transfer: there was a connection error during the transfer. You can retry to make the invoice once
	    //     the network connection is up 

	    push_and_invoice_order: function(order){
	        var self = this;
	        var invoiced = new $.Deferred(); 

	        if(!order.get_client()){
	            invoiced.reject({code:400, message:'Missing Customer', data:{}});
	            return invoiced;
	        }

	        var order_id = this.db.add_order(order.export_as_JSON());

	        this.flush_mutex.exec(function(){
	            var done = new $.Deferred(); // holds the mutex

	            // send the order to the server
	            // we have a 30 seconds timeout on this push.
	            // FIXME: if the server takes more than 30 seconds to accept the order,
	            // the client will believe it wasn't successfully sent, and very bad
	            // things will happen as a duplicate will be sent next time
	            // so we must make sure the server detects and ignores duplicated orders

	            var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});
	            
	            transfer.fail(function(error){
	                invoiced.reject(error);
	                done.reject();
	            });

	            // on success, get the order id generated by the server
	            transfer.pipe(function(order_server_id){    

	                // generate the pdf and download it
	                /*
	            	self.chrome.do_action('point_of_sale.pos_invoice_report',{additional_context:{ 
	                    active_ids:order_server_id,
	                }});
	                */
	            	
	                var posInvoiceModel = new Model('account.invoice');
	                return posInvoiceModel.call('pos_matrix_print',
	                    order_server_id,
	                ).then(function (cad) {
	                	invoiced.resolve();
		                done.resolve();
	                    if(self.config.local_server_active == true)
	                    {
			                /**/
		                    var xmlhttp,url,status,estadoComp;
	
		                	if (window.XMLHttpRequest)
		                    {
		                        // para IE7+, Firefox, Chrome, Opera, Safari
		                        xmlhttp=new XMLHttpRequest();
		                    }
		                    else
		                    {
		                        // para IE6, IE5
		                        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
		                    }
	
		                    xmlhttp.onreadystatechange=function()
		                    {
		                        estadoComp=xmlhttp.readyState;
		                        if ( estadoComp ==4 )
		                        {            
		                        	status=xmlhttp.status;
		                            if ( status == 200 )
		                            {   
		                            	alert('Fin de impresion:'+xmlhttp.responseText);
		                            }
		                            else
		                            {
		                            	alert('Fin de impresion:'+'ERROR: No se pudo contactar al servidor de impresion');
		                            }
		                        }   
		                    }
	
		                    url='http://'+self.config.local_server_ip+':'+self.config.local_server_port+'/imprime.html';
		                    //url='http://'+self.config.local_server_ip+':'+self.config.local_server_port+'/';
		                    xmlhttp.open("POST",url,true);
		                    xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
		                    xmlhttp.send(self.config.local_printer_name+'\n'+cad);
		                    //xmlhttp.send(cad);
		                    /**/
	                    
	                    }
		                console.log(cad);
	                }).fail(function (error, event){
	                    if(error.code === 200 ){    // Business Logic Error, not a connection problem
	                        //if warning do not need to display traceback!!
	                        if (error.data.exception_type == 'warning') {
	                            delete error.data.debug;
	                        }

	                        // Hide error if already shown before ... 
	                        if ((!self.get('failed') || options.show_error)) {
	                            self.gui.show_popup('error-traceback',{
	                                'title': error.data.message,
	                                'body':  error.data.debug
	                            });
	                        }
	                        self.set('failed',error)
	                    }
	                    // prevent an error popup creation by the rpc failure
	                    // we want the failure to be silent as we send the orders in the background
	                    event.preventDefault();
	                    console.error('Error al intentar obtener la cadena de texto:', order_server_id);
	                });
	            	
	                invoiced.resolve();
	                done.resolve();
	            });

	            return done;

	        });

	        return invoiced;
	    },
	    
	});


});